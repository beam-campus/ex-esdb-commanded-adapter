searchData={"items":[{"type":"module","title":"ExESDB.Commanded.Adapter","doc":"An adapter for Commanded to use ExESDB as the event store.\n  for reference, see: https://hexdocs.pm/commanded/Commanded.EventStore.Adapter.html","ref":"ExESDB.Commanded.Adapter.html"},{"type":"type","title":"ExESDB.Commanded.Adapter.adapter_meta/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:adapter_meta/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.append_to_stream/5","doc":"Append one or more events to a stream atomically.","ref":"ExESDB.Commanded.Adapter.html#append_to_stream/5"},{"type":"type","title":"ExESDB.Commanded.Adapter.application/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:application/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.child_spec/2","doc":"Return a child spec defining all processes required by the event store.","ref":"ExESDB.Commanded.Adapter.html#child_spec/2"},{"type":"type","title":"ExESDB.Commanded.Adapter.config/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:config/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.delete_snapshot/2","doc":"Delete a snapshot of the current state of the event store.","ref":"ExESDB.Commanded.Adapter.html#delete_snapshot/2"},{"type":"function","title":"ExESDB.Commanded.Adapter.delete_subscription/3","doc":"Delete a subscription.","ref":"ExESDB.Commanded.Adapter.html#delete_subscription/3"},{"type":"type","title":"ExESDB.Commanded.Adapter.error/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:error/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.expected_version/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:expected_version/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.record_snapshot/2","doc":"Record a snapshot of the current state of the event store.","ref":"ExESDB.Commanded.Adapter.html#record_snapshot/2"},{"type":"type","title":"ExESDB.Commanded.Adapter.source_uuid/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:source_uuid/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.start_from/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:start_from/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.stream_forward/4","doc":"Streams events from the given stream, in the order in which they were\n  originally written.","ref":"ExESDB.Commanded.Adapter.html#stream_forward/4"},{"type":"type","title":"ExESDB.Commanded.Adapter.stream_uuid/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:stream_uuid/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.subscribe/2","doc":"Create a transient subscription to a single event stream.\n\n  The event store will publish any events appended to the given stream to the\n  `subscriber` process as an `{:events, events}` message.\n\n  The subscriber does not need to acknowledge receipt of the events.","ref":"ExESDB.Commanded.Adapter.html#subscribe/2"},{"type":"function","title":"ExESDB.Commanded.Adapter.subscribe_to/6","doc":"Create a persistent subscription to an event stream.","ref":"ExESDB.Commanded.Adapter.html#subscribe_to/6"},{"type":"type","title":"ExESDB.Commanded.Adapter.subscriber/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:subscriber/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.subscription/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:subscription/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.subscription_name/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:subscription_name/0"},{"type":"module","title":"ExESDB.Commanded.Adapter.EventConverter","doc":"Handles conversion between ExESDB events and Commanded events.","ref":"ExESDB.Commanded.Adapter.EventConverter.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.EventConverter.convert_event_record/1","doc":"Converts a single ExESDB EventRecord to Commanded RecordedEvent.","ref":"ExESDB.Commanded.Adapter.EventConverter.html#convert_event_record/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.EventConverter.convert_events/1","doc":"Converts a list of events to Commanded format.","ref":"ExESDB.Commanded.Adapter.EventConverter.html#convert_events/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.EventConverter.parse_metadata/1","doc":"Parses metadata from various formats (binary, map, or nil).","ref":"ExESDB.Commanded.Adapter.EventConverter.html#parse_metadata/1"},{"type":"module","title":"ExESDB.Commanded.Adapter.StreamHelper","doc":"Helper functions for stream operations and subscription type detection.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.allowed_stream?/1","doc":"Determines if a stream subscription should be allowed based on the stream type.\nAllows:\n- $all streams (global) - aggregates should subscribe to this and filter by stream_id\n- Event type streams ($et-*) - for projection systems\n\nBlocks:\n- Individual stream subscriptions to prevent creating separate emitters per aggregate","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#allowed_stream?/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.map_error/1","doc":"Maps ExESDB error responses to Commanded error format.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#map_error/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.normalize_expected_version/1","doc":"Normalizes Commanded expected versions to ExESDB expected versions.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#normalize_expected_version/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.normalize_start_version/1","doc":"Converts start_from parameter to version number for ExESDB.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#normalize_start_version/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.store_id/1","doc":"Extracts store configuration from adapter metadata.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#store_id/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.stream_prefix/1","doc":"Extracts stream prefix from adapter metadata.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#stream_prefix/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.stream_to_subscription_params/2","doc":"Converts a stream identifier to subscription type and selector.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#stream_to_subscription_params/2"},{"type":"module","title":"ExESDB.Commanded.Adapter.SubscriptionProxy","doc":"Supervised GenServer that handles subscription proxies for converting ExESDB events to Commanded format.\n\nThis process is supervised and maintains its registration with the ExESDB store,\nensuring event delivery continues even after process restarts.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxy.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html#child_spec/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxy.start_link/1","doc":"Starts a supervised subscription proxy process.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html#start_link/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxy.start_proxy/1","doc":"Legacy function for backward compatibility - now starts supervised process.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html#start_proxy/1"},{"type":"module","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor","doc":"Supervisor for SubscriptionProxy processes.\n\nThis supervisor ensures that SubscriptionProxy processes are restarted\nwhen they crash, and their PIDs are updated in the ExESDB store.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#child_spec/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.list_proxies/0","doc":"List all running proxy processes.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#list_proxies/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.start_link/1","doc":"","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#start_link/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.start_proxy/1","doc":"Start a supervised SubscriptionProxy.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#start_proxy/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.stop_proxy/1","doc":"Stop a supervised SubscriptionProxy.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#stop_proxy/1"},{"type":"module","title":"ExESDB.Commanded.AggregateListener","doc":"A process that subscribes to the EventStore's Phoenix PubSub ` :$all` topic\nand filters events by stream_id for aggregate transient subscriptions.\n\nThis replaces the previous subscription mechanism for aggregates, providing\na more scalable approach that leverages Phoenix PubSub for event distribution.\n\nEach AggregateListener process:\n1. Subscribes to the ` :$all` Phoenix PubSub topic\n2. Filters incoming events based on the target stream_id\n3. Transforms ExESDB.Schema.EventRecord to Commanded.EventStore.RecordedEvent\n4. Forwards matching events to the subscriber process","ref":"ExESDB.Commanded.AggregateListener.html"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.AggregateListener.html#child_spec/1"},{"type":"type","title":"ExESDB.Commanded.AggregateListener.listener_config/0","doc":"","ref":"ExESDB.Commanded.AggregateListener.html#t:listener_config/0"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.start/1","doc":"Starts an AggregateListener without linking to the calling process.\nUseful for transient subscriptions where we don't want to crash the caller.","ref":"ExESDB.Commanded.AggregateListener.html#start/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.start_link/1","doc":"Starts an AggregateListener for the given stream.","ref":"ExESDB.Commanded.AggregateListener.html#start_link/1"},{"type":"function","title":"Parameters - ExESDB.Commanded.AggregateListener.start_link/1","doc":"- config: Map containing:\n  - store_id: The EventStore identifier\n  - stream_id: The target stream to filter events for\n  - subscriber: The process to send filtered events to\n  - pubsub_name: The Phoenix PubSub name (defaults to :ex_esdb_pubsub)\n  - replay_historical_events?: Whether to replay historical events on startup (defaults to true)","ref":"ExESDB.Commanded.AggregateListener.html#start_link/1-parameters"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.stop/1","doc":"Stops the AggregateListener process.","ref":"ExESDB.Commanded.AggregateListener.html#stop/1"},{"type":"module","title":"ExESDB.Commanded.AggregateListenerSupervisor","doc":"DynamicSupervisor for managing AggregateListener processes.\n\nThis supervisor is responsible for:\n1. Starting and stopping AggregateListener processes\n2. Ensuring proper supervision and restart strategies\n3. Maintaining a registry of active listeners\n4. Cleanup on application shutdown","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#child_spec/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.list_listeners/0","doc":"Lists all active listeners with their details.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#list_listeners/0"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.start_link/1","doc":"","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#start_link/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.start_listener/1","doc":"Starts a new AggregateListener under supervision.\n\nReturns the PID of the started listener or an error.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#start_listener/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.stats/0","doc":"Returns statistics about active listeners.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#stats/0"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.stop_listener/1","doc":"Stops a specific AggregateListener.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#stop_listener/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.stop_listeners_for_stream/2","doc":"Stops all listeners for a specific store and stream combination.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#stop_listeners_for_stream/2"},{"type":"module","title":"ExESDB.Commanded.Config","doc":"Configuration validation and normalization for ExESDB.Commanded.Adapter.\n\nThis module provides standardized configuration handling with proper validation,\nerror handling, and normalization to ensure consistent behavior between Commanded\nand ExESDB systems.","ref":"ExESDB.Commanded.Config.html"},{"type":"type","title":"ExESDB.Commanded.Config.adapter_config/0","doc":"","ref":"ExESDB.Commanded.Config.html#t:adapter_config/0"},{"type":"type","title":"ExESDB.Commanded.Config.config/0","doc":"","ref":"ExESDB.Commanded.Config.html#t:config/0"},{"type":"function","title":"ExESDB.Commanded.Config.connection_timeout/1","doc":"Gets the connection timeout from configuration or environment.","ref":"ExESDB.Commanded.Config.html#connection_timeout/1"},{"type":"function","title":"ExESDB.Commanded.Config.retry_attempts/1","doc":"Gets the retry attempts from configuration or environment.","ref":"ExESDB.Commanded.Config.html#retry_attempts/1"},{"type":"function","title":"ExESDB.Commanded.Config.retry_backoff/1","doc":"Gets the retry backoff from configuration or environment.","ref":"ExESDB.Commanded.Config.html#retry_backoff/1"},{"type":"function","title":"ExESDB.Commanded.Config.serializer/1","doc":"Gets the serializer module from configuration or environment.","ref":"ExESDB.Commanded.Config.html#serializer/1"},{"type":"function","title":"ExESDB.Commanded.Config.store_id/1","doc":"Gets the store ID from configuration or environment.","ref":"ExESDB.Commanded.Config.html#store_id/1"},{"type":"function","title":"ExESDB.Commanded.Config.stream_prefix/1","doc":"Gets the stream prefix from configuration or environment.\n\nStream prefixes cannot contain dashes to avoid conflicts with ExESDB\ninternal naming conventions.","ref":"ExESDB.Commanded.Config.html#stream_prefix/1"},{"type":"function","title":"ExESDB.Commanded.Config.use_libcluster?/1","doc":"Checks if libcluster should be used for node discovery.","ref":"ExESDB.Commanded.Config.html#use_libcluster?/1"},{"type":"function","title":"ExESDB.Commanded.Config.validate/1","doc":"Validates and normalizes configuration for ExESDB.Commanded.Adapter.","ref":"ExESDB.Commanded.Config.html#validate/1"},{"type":"function","title":"Options - ExESDB.Commanded.Config.validate/1","doc":"* `:store_id` - ExESDB store identifier (required)\n* `:stream_prefix` - Prefix for all streams (default: \"\")\n* `:serializer` - Serialization module (default: Jason)\n* `:use_libcluster` - Whether to use libcluster for node discovery (default: true)\n* `:connection_timeout` - Connection timeout in ms (default: 10_000)\n* `:retry_attempts` - Number of retry attempts for failed operations (default: 3)\n* `:retry_backoff` - Backoff interval between retries in ms (default: 1_000)","ref":"ExESDB.Commanded.Config.html#validate/1-options"},{"type":"function","title":"Examples - ExESDB.Commanded.Config.validate/1","doc":"iex> ExESDB.Commanded.Config.validate([store_id: :my_store])\n    {:ok, %{store_id: :my_store, stream_prefix: \"\", ...}}\n    \n    iex> ExESDB.Commanded.Config.validate([])\n    {:error, {:missing_required_config, [:store_id]}}","ref":"ExESDB.Commanded.Config.html#validate/1-examples"},{"type":"function","title":"ExESDB.Commanded.Config.validate_libcluster_config/1","doc":"Validates libcluster topology configuration.","ref":"ExESDB.Commanded.Config.html#validate_libcluster_config/1"},{"type":"function","title":"ExESDB.Commanded.Config.validate_serializer/1","doc":"Validates that the serializer module is available and has required functions.","ref":"ExESDB.Commanded.Config.html#validate_serializer/1"},{"type":"module","title":"ExESDB.Commanded.Mapper","doc":"A mapper for Commanded to use ExESDB as the event store.","ref":"ExESDB.Commanded.Mapper.html"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_new_event/1","doc":"Converts a Commanded EventData struct to an ExESDB.Schema.NewEvent struct.","ref":"ExESDB.Commanded.Mapper.html#to_new_event/1"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_recorded_event/1","doc":"Converts an ExESDB.Schema.EventRecord struct to a Commanded RecordedEvent struct.","ref":"ExESDB.Commanded.Mapper.html#to_recorded_event/1"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_snapshot_data/1","doc":"Converts an ExESDB.Schema.SnapshotRecord struct to a Commanded SnapshotData struct.","ref":"ExESDB.Commanded.Mapper.html#to_snapshot_data/1"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_snapshot_record/1","doc":"Converts a Commanded SnapshotData struct to an ExESDB.Schema.SnapshotRecord struct.","ref":"ExESDB.Commanded.Mapper.html#to_snapshot_record/1"},{"type":"extras","title":"ADR","doc":"","ref":"adr.html"},{"type":"extras","title":"CHANGELOG","doc":"","ref":"changelog.html"},{"type":"extras","title":"Getting Started","doc":"","ref":"getting-started.html"},{"type":"extras","title":"Getting Started Guide - Getting Started","doc":"---","ref":"getting-started.html#getting-started-guide"},{"type":"extras","title":"Introduction - Getting Started","doc":"Welcome to the ExESDB Commanded Adapter! This guide will walk you through setting up the adapter to work with your Commanded application using ExESDB as your event store.","ref":"getting-started.html#introduction"},{"type":"extras","title":"Prerequisites - Getting Started","doc":"- **Elixir Version:** Ensure your Elixir environment is 1.17 or newer.\n- **Commanded Library:** This package acts as an adapter for Commanded, so you'll need to have it set up in your Elixir project.","ref":"getting-started.html#prerequisites"},{"type":"extras","title":"Installation - Getting Started","doc":"Add the adapter to your Mix dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:ex_esdb_commanded, \"~> 0.1.0\"},\n  ]\nend\n```\n\nRun `mix deps.get` to fetch the dependency.","ref":"getting-started.html#installation"},{"type":"extras","title":"Configuration - Getting Started","doc":"Configuration can be done in your `config/config.exs` file.","ref":"getting-started.html#configuration"},{"type":"extras","title":"Basic Configuration - Getting Started","doc":"Add the following configuration to specify the adapter for your Commanded application:\n\n```elixir\nconfig :my_app, MyApp.CommandedApp,\n  event_store: [\n    adapter: ExESDB.Commanded.Adapter,\n    store_id: :my_store_id,\n    stream_prefix: \"my_app_\",\n    event_type_mapper: MyApp.EventTypeMapper\n  ]\n```","ref":"getting-started.html#basic-configuration"},{"type":"extras","title":"Environment Variables - Getting Started","doc":"Make sure to check environment variables for dynamic configurations:\n\n- `EXESDB_COMMANDED_STORE_ID`\n- `EXESDB_COMMANDED_STREAM_PREFIX`\n\nSet these accordingly in your environment or `runtime.exs`.","ref":"getting-started.html#environment-variables"},{"type":"extras","title":"Advanced Options - Getting Started","doc":"You can also tweak other settings like connection timeout, retry attempts, and backoff intervals:\n\n```elixir\nconfig :ex_esdb_commanded_adapter,\n  connection_timeout: 15_000,\n  retry_attempts: 5,\n  retry_backoff: 1_500\n```","ref":"getting-started.html#advanced-options"},{"type":"extras","title":"Using the Adapter - Getting Started","doc":"1. **Start Your ExESDB Instance:** Ensure your ExESDB instance is running and reachable.\n2. **Initialize Commanded:** Once configured, Commanded will use the ExESDB adapter for event storage.\n\n3. **Event Handling:** Use your registered event type mapper to handle event types efficiently.","ref":"getting-started.html#using-the-adapter"},{"type":"extras","title":"Debugging and Logs - Getting Started","doc":"Enable detailed logging to troubleshoot:\n\n```elixir\nconfig :logger, :console,\n  format: \"$time [$level] $metadata$message\\n\",\n  metadata: [:mfa, :request_id]\n```\n\nCheck logs for information on event handling and adapter performance.","ref":"getting-started.html#debugging-and-logs"},{"type":"extras","title":"Summary - Getting Started","doc":"Congratulations! You’ve set up and configured the ExESDB Commanded Adapter in your project. Enjoy a seamless event-driven architecture with the power of Commanded and ExESDB.\n\n---","ref":"getting-started.html#summary"},{"type":"extras","title":"Event Sourcing with CQRS","doc":"","ref":"event-sourcing-with-cqrs.html"},{"type":"extras","title":"Event Sourcing with CQRS Guide - Event Sourcing with CQRS","doc":"---","ref":"event-sourcing-with-cqrs.html#event-sourcing-with-cqrs-guide"},{"type":"extras","title":"Introduction - Event Sourcing with CQRS","doc":"Event Sourcing and CQRS (Command Query Responsibility Segregation) are architectural patterns that have gained significant traction in recent years for building scalable, maintainable, and resilient applications.","ref":"event-sourcing-with-cqrs.html#introduction"},{"type":"extras","title":"History - Event Sourcing with CQRS","doc":"Event Sourcing has its roots in finance, where maintaining a clear, auditable trail of transactions is paramount. Over time, its advantages in state management and consistency have led to its adoption in various software domains. CQRS emerged to better handle the complexities in systems where read and write models have different scaling requirements and logic.","ref":"event-sourcing-with-cqrs.html#history"},{"type":"extras","title":"Principles - Event Sourcing with CQRS","doc":"- **Event Sourcing**: Instead of storing just the current state, all changes (events) are stored. The state is then derived by replaying these events.\n- **CQRS**: Segregates the read and write parts of the application by using separate models to optimize performance, security, and scalability.","ref":"event-sourcing-with-cqrs.html#principles"},{"type":"extras","title":"Applicability - Event Sourcing with CQRS","doc":"These patterns are particularly suited for systems where:\n\n- Auditability and traceability are required.\n- Complex domains requiring distinct read and write optimizations.\n- Scalable systems where different scaling strategies are needed.","ref":"event-sourcing-with-cqrs.html#applicability"},{"type":"extras","title":"Motivation - Event Sourcing with CQRS","doc":"- **Audit Trail**: Easily audit past changes as all events are stored.\n- **Scalability**: Tailor read/write models to specific performance needs.\n- **Resilience**: Replay events in case of failures, ensuring recovery.\n- **Decoupling**: Separate concerns lead to cleaner, more maintainable code.","ref":"event-sourcing-with-cqrs.html#motivation"},{"type":"extras","title":"Key Concepts and Patterns - Event Sourcing with CQRS","doc":"","ref":"event-sourcing-with-cqrs.html#key-concepts-and-patterns"},{"type":"extras","title":"Event Sourcing - Event Sourcing with CQRS","doc":"- **Event**: A record of a change that occurred in the system.\n- **Event Store**: A database designed to store events in order.\n- **Aggregate**: A cluster of domain objects treated as a single unit, modified by handling events.","ref":"event-sourcing-with-cqrs.html#event-sourcing"},{"type":"extras","title":"CQRS - Event Sourcing with CQRS","doc":"- **Command**: Represents an intention to perform an action.\n- **Query**: Request for information, optimized for performance.\n- **Read Model**: Optimized for retrieval operations, often denormalized.\n- **Write Model**: Optimized for handling business logic and making changes.","ref":"event-sourcing-with-cqrs.html#cqrs"},{"type":"extras","title":"Benefits - Event Sourcing with CQRS","doc":"- **Simplified Logic**: By separating read and write models, complex logic is easier to manage.\n- **Improved Performance**: Optimize read operations separately from write operations.\n- **Enhanced Collaboration**: Different teams can work on read and write models independently.","ref":"event-sourcing-with-cqrs.html#benefits"},{"type":"extras","title":"Conclusion - Event Sourcing with CQRS","doc":"Event Sourcing with CQRS provides a robust framework for building applications that are scalable, maintainable, and transparent. Understanding and applying these patterns empowers developers to tackle complex domains with confidence.","ref":"event-sourcing-with-cqrs.html#conclusion"},{"type":"extras","title":"Read Me","doc":"# ex-esdb-commanded-adapter\nAn ExESDB Adapter for the fantastic Commanded Library","ref":"readme.html"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.2"}}