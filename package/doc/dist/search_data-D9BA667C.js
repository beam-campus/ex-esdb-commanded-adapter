searchData={"items":[{"type":"module","title":"ExESDB.Commanded.Adapter","doc":"An adapter for Commanded to use ExESDB as the event store.\n  for reference, see: https://hexdocs.pm/commanded/Commanded.EventStore.Adapter.html","ref":"ExESDB.Commanded.Adapter.html"},{"type":"type","title":"ExESDB.Commanded.Adapter.adapter_meta/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:adapter_meta/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.append_to_stream/5","doc":"Append one or more events to a stream atomically.","ref":"ExESDB.Commanded.Adapter.html#append_to_stream/5"},{"type":"type","title":"ExESDB.Commanded.Adapter.application/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:application/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.child_spec/2","doc":"Return a child spec defining all processes required by the event store.","ref":"ExESDB.Commanded.Adapter.html#child_spec/2"},{"type":"type","title":"ExESDB.Commanded.Adapter.config/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:config/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.delete_snapshot/2","doc":"Delete a snapshot of the current state of the event store.","ref":"ExESDB.Commanded.Adapter.html#delete_snapshot/2"},{"type":"function","title":"ExESDB.Commanded.Adapter.delete_subscription/3","doc":"Delete a subscription.","ref":"ExESDB.Commanded.Adapter.html#delete_subscription/3"},{"type":"type","title":"ExESDB.Commanded.Adapter.error/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:error/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.expected_version/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:expected_version/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.extract_otp_app/1","doc":"Attempts to extract the OTP application name from a module.","ref":"ExESDB.Commanded.Adapter.html#extract_otp_app/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.record_snapshot/2","doc":"Record a snapshot of the current state of the event store.","ref":"ExESDB.Commanded.Adapter.html#record_snapshot/2"},{"type":"type","title":"ExESDB.Commanded.Adapter.source_uuid/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:source_uuid/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.start_from/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:start_from/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.stream_forward/4","doc":"Streams events from the given stream, in the order in which they were\n  originally written.","ref":"ExESDB.Commanded.Adapter.html#stream_forward/4"},{"type":"type","title":"ExESDB.Commanded.Adapter.stream_uuid/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:stream_uuid/0"},{"type":"function","title":"ExESDB.Commanded.Adapter.subscribe/2","doc":"Create a transient subscription to a single event stream.\n\n  The event store will publish any events appended to the given stream to the\n  `subscriber` process as an `{:events, events}` message.\n\n  The subscriber does not need to acknowledge receipt of the events.","ref":"ExESDB.Commanded.Adapter.html#subscribe/2"},{"type":"function","title":"ExESDB.Commanded.Adapter.subscribe_to/6","doc":"Create a persistent subscription to an event stream.","ref":"ExESDB.Commanded.Adapter.html#subscribe_to/6"},{"type":"type","title":"ExESDB.Commanded.Adapter.subscriber/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:subscriber/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.subscription/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:subscription/0"},{"type":"type","title":"ExESDB.Commanded.Adapter.subscription_name/0","doc":"","ref":"ExESDB.Commanded.Adapter.html#t:subscription_name/0"},{"type":"module","title":"ExESDB.Commanded.Adapter.EventConverter","doc":"Handles conversion between ExESDB events and Commanded events.","ref":"ExESDB.Commanded.Adapter.EventConverter.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.EventConverter.convert_event_record/1","doc":"Converts a single ExESDB EventRecord to Commanded RecordedEvent.","ref":"ExESDB.Commanded.Adapter.EventConverter.html#convert_event_record/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.EventConverter.convert_events/1","doc":"Converts a list of events to Commanded format.","ref":"ExESDB.Commanded.Adapter.EventConverter.html#convert_events/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.EventConverter.parse_metadata/1","doc":"Parses metadata from various formats (binary, map, or nil).","ref":"ExESDB.Commanded.Adapter.EventConverter.html#parse_metadata/1"},{"type":"module","title":"ExESDB.Commanded.Adapter.StreamHelper","doc":"Helper functions for stream operations and subscription type detection.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.allowed_stream?/1","doc":"Determines if a stream subscription should be allowed based on the stream type.\nAllows:\n- $all streams (global) - aggregates should subscribe to this and filter by stream_id\n- Event type streams ($et-*) - for projection systems\n\nBlocks:\n- Individual stream subscriptions to prevent creating separate emitters per aggregate","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#allowed_stream?/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.map_error/1","doc":"Maps ExESDB error responses to Commanded error format.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#map_error/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.normalize_expected_version/1","doc":"Normalizes Commanded expected versions to ExESDB expected versions.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#normalize_expected_version/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.normalize_start_version/1","doc":"Converts start_from parameter to version number for ExESDB.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#normalize_start_version/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.phoenix_pubsub/1","doc":"","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#phoenix_pubsub/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.pubsub/1","doc":"","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#pubsub/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.pubsub_name/2","doc":"","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#pubsub_name/2"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.store_id/1","doc":"Extracts store configuration from adapter metadata.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#store_id/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.stream_prefix/1","doc":"Extracts stream prefix from adapter metadata.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#stream_prefix/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.StreamHelper.stream_to_subscription_params/2","doc":"Converts a stream identifier to subscription type and selector.","ref":"ExESDB.Commanded.Adapter.StreamHelper.html#stream_to_subscription_params/2"},{"type":"module","title":"ExESDB.Commanded.Adapter.SubscriptionProxy","doc":"Supervised GenServer that handles subscription proxies for converting ExESDB events to Commanded format.\n\nThis process is supervised and maintains its registration with the ExESDB store,\nensuring event delivery continues even after process restarts.\n\nThere is an aggressive re-registration process that runs periodically \nto ensure the subscription PID is current. This is mainly to deal with \nnew leader election scenarios where the emitter processes are restarted.\n\nWe should think of a mechanism to handle this better in the future.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxy.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html#child_spec/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxy.start_link/1","doc":"Starts a supervised subscription proxy process.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html#start_link/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxy.start_proxy/1","doc":"Legacy function for backward compatibility - now starts supervised process.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxy.html#start_proxy/1"},{"type":"module","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor","doc":"Supervisor for SubscriptionProxy processes.\n\nThis supervisor ensures that SubscriptionProxy processes are restarted\nwhen they crash, and their PIDs are updated in the ExESDB store.\n\nEach supervisor instance is associated with a specific store_id to support\nmultiple stores in umbrella applications.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#child_spec/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.list_proxies/1","doc":"List all running proxy processes for a specific store.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#list_proxies/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.start_link/1","doc":"","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#start_link/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.start_proxy/1","doc":"Start a supervised SubscriptionProxy.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#start_proxy/1"},{"type":"function","title":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.stop_proxy/2","doc":"Stop a supervised SubscriptionProxy.","ref":"ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.html#stop_proxy/2"},{"type":"module","title":"ExESDB.Commanded.AggregateListener","doc":"A process that subscribes to the EventStore's Phoenix PubSub ` :$all` topic\nand filters events by stream_id for aggregate transient subscriptions.\n\nSimplified with Swarm for process distribution.\n\nEach AggregateListener processes:\n1. Subscribes to the ` :$all` Phoenix PubSub topic\n2. Filters incoming events based on the target stream_id\n3. Transforms ExESDB.Schema.EventRecord to Commanded.EventStore.RecordedEvent\n4. Forwards matching events to the subscriber process","ref":"ExESDB.Commanded.AggregateListener.html"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.AggregateListener.html#child_spec/1"},{"type":"type","title":"ExESDB.Commanded.AggregateListener.listener_config/0","doc":"","ref":"ExESDB.Commanded.AggregateListener.html#t:listener_config/0"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.start/1","doc":"Starts an AggregateListener without linking to the calling process.\nUseful for transient subscriptions where we don't want to crash the caller.","ref":"ExESDB.Commanded.AggregateListener.html#start/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.start_link/1","doc":"Starts an AggregateListener for the given stream using Swarm.","ref":"ExESDB.Commanded.AggregateListener.html#start_link/1"},{"type":"function","title":"Parameters - ExESDB.Commanded.AggregateListener.start_link/1","doc":"- config: Map containing:\n  - store_id: The EventStore identifier\n  - stream_id: The target stream to filter events for\n  - subscriber: The process to send filtered events to\n  - replay_historical_events?: Whether to replay historical events on startup (defaults to true)","ref":"ExESDB.Commanded.AggregateListener.html#start_link/1-parameters"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.stop/1","doc":"Stops the AggregateListener process.","ref":"ExESDB.Commanded.AggregateListener.html#stop/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListener.swarm_key/1","doc":"","ref":"ExESDB.Commanded.AggregateListener.html#swarm_key/1"},{"type":"module","title":"ExESDB.Commanded.AggregateListenerSupervisor","doc":"DynamicSupervisor for managing AggregateListener processes.\n\nUses Swarm for distributed process registration. Each supervisor is uniquely\nidentified by a combination of store_id and node().","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#child_spec/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.hash_key/1","doc":"","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#hash_key/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.start_link/1","doc":"","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#start_link/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.start_listener/1","doc":"Starts a new AggregateListener under supervision.\n\nReturns the PID of the started listener or an error.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#start_listener/1"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.stop_listener/2","doc":"Stops a specific AggregateListener.","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#stop_listener/2"},{"type":"function","title":"ExESDB.Commanded.AggregateListenerSupervisor.swarm_key/1","doc":"","ref":"ExESDB.Commanded.AggregateListenerSupervisor.html#swarm_key/1"},{"type":"module","title":"ExESDB.Commanded.Config","doc":"Simple configuration for ExESDB.Commanded.Adapter.\n\nExpects configuration in the standard Commanded format:\n\n    config :my_otp_app, MyApp.CommandedApp,\n      event_store: [\n        event_type_mapper: MyApp.EventTypeMapper,\n        store_id: :my_store,\n        log_level: :info,\n        adapter: ExESDB.Commanded.Adapter,\n        stream_prefix: \"my_app_\"\n      ]","ref":"ExESDB.Commanded.Config.html"},{"type":"type","title":"ExESDB.Commanded.Config.config/0","doc":"","ref":"ExESDB.Commanded.Config.html#t:config/0"},{"type":"function","title":"ExESDB.Commanded.Config.event_store_config/2","doc":"Gets event store configuration from the application config.\n\nThe otp_app and commanded_app are passed from the adapter's child_spec.","ref":"ExESDB.Commanded.Config.html#event_store_config/2"},{"type":"function","title":"ExESDB.Commanded.Config.event_type_mapper/2","doc":"Gets the event type mapper from configuration.","ref":"ExESDB.Commanded.Config.html#event_type_mapper/2"},{"type":"function","title":"ExESDB.Commanded.Config.get_config/4","doc":"Gets a specific configuration value with a default.","ref":"ExESDB.Commanded.Config.html#get_config/4"},{"type":"function","title":"ExESDB.Commanded.Config.log_level/2","doc":"Gets the log level from configuration.","ref":"ExESDB.Commanded.Config.html#log_level/2"},{"type":"function","title":"ExESDB.Commanded.Config.serializer/2","doc":"Gets the serializer module from configuration.","ref":"ExESDB.Commanded.Config.html#serializer/2"},{"type":"function","title":"ExESDB.Commanded.Config.store_id/2","doc":"Gets the store ID from configuration.","ref":"ExESDB.Commanded.Config.html#store_id/2"},{"type":"function","title":"ExESDB.Commanded.Config.stream_prefix/2","doc":"Gets the stream prefix from configuration.","ref":"ExESDB.Commanded.Config.html#stream_prefix/2"},{"type":"function","title":"ExESDB.Commanded.Config.validate_event_store_config/3","doc":"Validates the event store configuration and warns about missing critical components.","ref":"ExESDB.Commanded.Config.html#validate_event_store_config/3"},{"type":"function","title":"ExESDB.Commanded.Config.validate_event_type_mapper/1","doc":"Validates that the event type mapper module exists and has required functions.","ref":"ExESDB.Commanded.Config.html#validate_event_type_mapper/1"},{"type":"behaviour","title":"ExESDB.Commanded.EventTypeMapper","doc":"Behaviour that defines how event modules are mapped to event type strings.\n\nImplementers must provide the to_event_type/1 function that converts\nan event module atom to a string representation.","ref":"ExESDB.Commanded.EventTypeMapper.html"},{"type":"type","title":"ExESDB.Commanded.EventTypeMapper.t/0","doc":"","ref":"ExESDB.Commanded.EventTypeMapper.html#t:t/0"},{"type":"callback","title":"ExESDB.Commanded.EventTypeMapper.to_event_type/1","doc":"","ref":"ExESDB.Commanded.EventTypeMapper.html#c:to_event_type/1"},{"type":"module","title":"ExESDB.Commanded.Mapper","doc":"A mapper for Commanded to use ExESDB as the event store.","ref":"ExESDB.Commanded.Mapper.html"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_new_event/2","doc":"Converts a Commanded EventData struct to an ExESDB.Schema.NewEvent struct.","ref":"ExESDB.Commanded.Mapper.html#to_new_event/2"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_recorded_event/1","doc":"Converts an ExESDB.Schema.EventRecord struct to a Commanded RecordedEvent struct.","ref":"ExESDB.Commanded.Mapper.html#to_recorded_event/1"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_snapshot_data/1","doc":"Converts an ExESDB.Schema.SnapshotRecord struct to a Commanded SnapshotData struct.","ref":"ExESDB.Commanded.Mapper.html#to_snapshot_data/1"},{"type":"function","title":"ExESDB.Commanded.Mapper.to_snapshot_record/1","doc":"Converts a Commanded SnapshotData struct to an ExESDB.Schema.SnapshotRecord struct.","ref":"ExESDB.Commanded.Mapper.html#to_snapshot_record/1"},{"type":"module","title":"ExESDB.Commanded.Naming","doc":"Helper module for creating store-specific GenServer names.\n\nThis module provides utilities for generating store-specific names for GenServers,\nallowing multiple ExESDB instances to run on the same node with different stores.","ref":"ExESDB.Commanded.Naming.html"},{"type":"module","title":"Usage - ExESDB.Commanded.Naming","doc":"Instead of using `name: __MODULE__` in GenServer registration, use:\n\n    name: ExESDB.StoreNaming.genserver_name(__MODULE__, store_id)\n\nThis will create store-specific names like `:\"ex_esdb_store_my_store\"` when\na store_id is provided, or fall back to the module name for backward compatibility.","ref":"ExESDB.Commanded.Naming.html#module-usage"},{"type":"module","title":"Valid Process Names - ExESDB.Commanded.Naming","doc":"This module ensures that all generated names are valid for use with GenServers,\nSupervisors, and other OTP processes. The generated names are simple atoms that\ncan be registered locally, which is compatible with Elixir's process naming\nrequirements.","ref":"ExESDB.Commanded.Naming.html#module-valid-process-names"},{"type":"function","title":"ExESDB.Commanded.Naming.child_spec_id/2","doc":"Generate a store-specific child spec id.\n\nThis function creates unique child spec IDs based on the module and store_id,\nallowing multiple instances of the same supervisor child to run with different stores.","ref":"ExESDB.Commanded.Naming.html#child_spec_id/2"},{"type":"function","title":"Parameters - ExESDB.Commanded.Naming.child_spec_id/2","doc":"* `module` - The GenServer module (typically `__MODULE__`)\n* `store_id` - The store identifier (string or atom)","ref":"ExESDB.Commanded.Naming.html#child_spec_id/2-parameters"},{"type":"function","title":"Examples - ExESDB.Commanded.Naming.child_spec_id/2","doc":"iex> ExESDB.StoreNaming.child_spec_id(ExESDB.Store, \"my_store\")\n    :\"ex_esdb_store_my_store\"\n    \n    iex> ExESDB.StoreNaming.child_spec_id(ExESDB.Store, nil)\n    ExESDB.Store","ref":"ExESDB.Commanded.Naming.html#child_spec_id/2-examples"},{"type":"function","title":"ExESDB.Commanded.Naming.extract_store_id/1","doc":"Extract store_id from options.\n\nThis is a convenience function to extract the store_id from the standard\noptions keyword list passed to GenServers.","ref":"ExESDB.Commanded.Naming.html#extract_store_id/1"},{"type":"function","title":"Examples - ExESDB.Commanded.Naming.extract_store_id/1","doc":"iex> ExESDB.StoreNaming.extract_store_id([store_id: \"my_store\", timeout: 5000])\n    \"my_store\"\n    \n    iex> ExESDB.StoreNaming.extract_store_id([timeout: 5000])\n    nil","ref":"ExESDB.Commanded.Naming.html#extract_store_id/1-examples"},{"type":"function","title":"ExESDB.Commanded.Naming.genserver_name/2","doc":"Generate a store-specific name for a GenServer.\n\nThis function creates unique GenServer names based on the module and store_id,\nallowing multiple instances of the same GenServer to run with different stores.\n\nThe function returns a valid process name that can be used for GenServers,\nSupervisors, and other OTP processes. When a store_id is provided, it creates\na unique atom by combining the module name with the store_id. When no store_id\nis provided, it falls back to the module name for backward compatibility.","ref":"ExESDB.Commanded.Naming.html#genserver_name/2"},{"type":"function","title":"Parameters - ExESDB.Commanded.Naming.genserver_name/2","doc":"* `module` - The GenServer module (typically `__MODULE__`)\n* `store_id` - The store identifier (string or atom)","ref":"ExESDB.Commanded.Naming.html#genserver_name/2-parameters"},{"type":"function","title":"Examples - ExESDB.Commanded.Naming.genserver_name/2","doc":"iex> ExESDB.StoreNaming.genserver_name(ExESDB.Store, \"my_store\")\n    :\"ex_esdb_store_my_store\"\n    \n    iex> ExESDB.StoreNaming.genserver_name(ExESDB.Store, nil)\n    ExESDB.Store\n    \n    iex> ExESDB.StoreNaming.genserver_name(ExESDB.LeaderWorker, \"cluster_store\")\n    :\"ex_esdb_leader_worker_cluster_store\"","ref":"ExESDB.Commanded.Naming.html#genserver_name/2-examples"},{"type":"function","title":"ExESDB.Commanded.Naming.partition_name/2","doc":"Generate a store-specific name for partition supervisors like StreamsWriters, etc.\n\nThis function creates unique names for global resources that would otherwise conflict\nbetween multiple ExESDB instances.","ref":"ExESDB.Commanded.Naming.html#partition_name/2"},{"type":"function","title":"Parameters - ExESDB.Commanded.Naming.partition_name/2","doc":"* `base_name` - The base name atom (e.g., ExESDB.StreamsWriters)\n* `store_id` - The store identifier (string or atom)","ref":"ExESDB.Commanded.Naming.html#partition_name/2-parameters"},{"type":"function","title":"Examples - ExESDB.Commanded.Naming.partition_name/2","doc":"iex> ExESDB.StoreNaming.partition_name(ExESDB.StreamsWriters, \"my_store\")\n    :\"exesdb_streamswriters_my_store\"\n    \n    iex> ExESDB.StoreNaming.partition_name(ExESDB.StreamsWriters, nil)\n    ExESDB.StreamsWriters","ref":"ExESDB.Commanded.Naming.html#partition_name/2-examples"},{"type":"extras","title":"ADR","doc":"","ref":"adr.html"},{"type":"extras","title":"Changelog","doc":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.3.1] - 2025-07-20","ref":"changelog.html"},{"type":"extras","title":"Changed - Changelog","doc":"- **BREAKING**: Refactored EventTypeMapper to use behavior-based approach instead of process dictionary\n- **BREAKING**: EventTypeMappers must now implement `ExESDB.Commanded.EventTypeMapper` behaviour\n- Removed dynamic event type mapping in favor of explicit function clauses\n- Improved error messages for missing or invalid event type mappers\n- Better validation of event type mapper configuration at startup","ref":"changelog.html#changed"},{"type":"extras","title":"Added - Changelog","doc":"- `ExESDB.Commanded.EventTypeMapper` behaviour defining the required interface\n- Comprehensive documentation for implementing event type mappers\n- Early validation of event type mapper implementations\n- Clearer error messages for event type mapping failures","ref":"changelog.html#added"},{"type":"extras","title":"Fixed - Changelog","doc":"- Process dictionary-based event type mapping which could cause issues in certain scenarios\n- Potential race conditions in event type mapper configuration\n- Unclear error messages when event type mapper was misconfigured","ref":"changelog.html#fixed"},{"type":"extras","title":"Migration Guide - Changelog","doc":"`EventTypeMappers` must now implement the `ExESDB.Commanded.EventTypeMapper` behaviour:\n\n```elixir\n# In your application's config/config.exs:\nconfig :my_app, MyApp.CommandedApp,\n  event_store: [\n    adapter: ExESDB.Commanded.Adapter,\n    event_type_mapper: MyApp.EventTypeMapper,\n    store_id: :my_store,\n    # ... other config\n  ]\n\n# In lib/my_app/event_type_mapper.ex:\ndefmodule MyApp.EventTypeMapper do\n  @behaviour ExESDB.Commanded.EventTypeMapper\n\n  # Explicit function clauses for each event type\n  def to_event_type(MyApp.Events.UserRegistered), do: \"user_registered:v1\"\n  def to_event_type(MyApp.Events.EmailVerified), do: \"email_verified:v1\"\n\n  # Fallback for unknown event types\n  def to_event_type(unknown_event) do\n    raise \"Unknown event type: #{inspect(unknown_event)}\"\n  end\nend\n```\n\n## [0.2.4] - 2025-07-18","ref":"changelog.html#migration-guide"},{"type":"extras","title":"Added - Changelog","doc":"- **Comprehensive Integration Test Suite**: Complete integration tests validating adapter behavior with real ExESDB.System instances\n- **Test Suite Documentation**: Detailed guide (`guides/test-suite.md`) covering unit tests, integration tests, and testing best practices\n- **Integration Test Helper**: Utility module (`test/support/integration_test_helper.ex`) for system management and test data creation\n- **ExESDB v0.4.1 Dependency**: Added for test and development environments only\n- **Test Coverage**: Validates timeout prevention, event persistence, system restart resilience, concurrent operations, and large payload handling","ref":"changelog.html#added-1"},{"type":"extras","title":"Changed - Changelog","doc":"- **Version Bump**: Updated version from 0.2.3 to 0.2.4\n- **Documentation**: Added test suite guide to ExDoc documentation\n- **Test Helper**: Enhanced test helper with conditional ExESDB startup for integration tests","ref":"changelog.html#changed-1"},{"type":"extras","title":"Test Suite Features - Changelog","doc":"- **Timeout Prevention**: Ensures system doesn't fail due to timeouts when appending events\n- **Event Persistence**: Verifies events can be retrieved after being appended\n- **System Restart Resilience**: Tests that events persist across ExESDB.System restarts\n- **Concurrent Operations**: Validates handling of multiple concurrent stream operations\n- **Large Payload Handling**: Tests handling of events with >1KB data payloads\n- **Automatic Cleanup**: Tests clean up data directories and processes automatically\n- **Configurable Ports**: Uses random ports to avoid conflicts in CI/CD environments\n- **Comprehensive Logging**: Detailed logging for troubleshooting and debugging\n\n## [0.2.3] - 2025-07-18","ref":"changelog.html#test-suite-features"},{"type":"extras","title":"Fixed - Changelog","doc":"- **HOTFIX**: Fixed `Enum.EmptyError` when no snapshots exist for an aggregate\n- Improved guard clause in `read_snapshot/2` to properly handle empty snapshots list\n\n## [0.2.2] - 2025-07-18","ref":"changelog.html#fixed-1"},{"type":"extras","title":"Added - Changelog","doc":"- Store-aware naming for supervisors and processes to support umbrella applications\n- Enhanced logging with store identification for better debugging\n- Comprehensive test suite for store-aware functionality","ref":"changelog.html#added-2"},{"type":"extras","title":"Changed - Changelog","doc":"- **BREAKING**: `AggregateListenerSupervisor` now requires `store_id` parameter\n- **BREAKING**: `SubscriptionProxySupervisor` now requires `store_id` parameter\n- **BREAKING**: `AggregateListenerSupervisor.stop_listener/1` now requires `store_id` as first parameter: `stop_listener(store_id, pid)`\n- **BREAKING**: `AggregateListenerSupervisor.stats/0` now requires `store_id` parameter: `stats(store_id)`\n- **BREAKING**: `AggregateListenerSupervisor.list_listeners/0` now requires `store_id` parameter: `list_listeners(store_id)`\n- **BREAKING**: `SubscriptionProxySupervisor.stop_proxy/1` now requires `store_id` as first parameter: `stop_proxy(store_id, pid)`\n- **BREAKING**: `SubscriptionProxySupervisor.list_proxies/0` now requires `store_id` parameter: `list_proxies(store_id)`\n- `AggregateListener` processes now use store-specific Registry naming\n- `SubscriptionProxy` processes now use global names with store prefixes\n- All supervisors and processes now include store information in log messages\n- Enhanced supervision tree isolation between different stores\n- Improved `read_snapshot/2` function to properly find latest snapshots using `ExESDB.SnapshotsReader.list_snapshots/2`\n- Enhanced `to_snapshot_record/1` mapper function with nil protection for `created_at` field","ref":"changelog.html#changed-2"},{"type":"extras","title":"Fixed - Changelog","doc":"- **CRITICAL**: Snapshot loading after server restart - snapshots now properly load the latest version instead of hardcoded version 0\n- Naming conflicts when multiple stores are used in umbrella applications\n- Process registry conflicts between different event stores\n- Supervisor name clashes in multi-store environments\n- Potential crashes when `created_at` field is nil in snapshot records","ref":"changelog.html#fixed-2"},{"type":"extras","title":"Technical Details - Changelog","doc":"#### Store-Aware Supervisor Naming\n\n- `AggregateListenerSupervisor` instances now use names like `ExESDB.Commanded.AggregateListenerSupervisor.StoreId`\n- `SubscriptionProxySupervisor` instances now use names like `ExESDB.Commanded.Adapter.SubscriptionProxySupervisor.StoreId`\n- Each store gets its own Registry: `ExESDB.Commanded.AggregateListenerSupervisor.StoreId.Registry`\n\n#### Process Naming\n\n- `AggregateListener` processes use store-specific Registry via tuples\n- `SubscriptionProxy` processes use global names with store prefixes: `{:global, {store_id, name}}`\n\n#### Logging Improvements\n\n- All log messages now include store identification\n- Format: `AggregateListener[store_id]: message` and `SubscriptionProxy[name] (store: store_id): message`\n\n#### Migration Guide\n\n**Before:**\n\n```elixir\nchild_specs = [\n  {AggregateListenerSupervisor, []},\n  {SubscriptionProxySupervisor, []}\n]\n```\n\n**After:**\n\n```elixir\nchild_specs = [\n  {AggregateListenerSupervisor, [store_id: :my_store]},\n  {SubscriptionProxySupervisor, [store_id: :my_store]}\n]\n```\n\n**API Changes:**\n\n```elixir\n# Before\nAggregateListenerSupervisor.stop_listener(pid)\nAggregateListenerSupervisor.stats()\nAggregateListenerSupervisor.list_listeners()\n\n# After\nAggregateListenerSupervisor.stop_listener(:my_store, pid)\nAggregateListenerSupervisor.stats(:my_store)\nAggregateListenerSupervisor.list_listeners(:my_store)\n```\n\n## [0.1.4] - Previous Release","ref":"changelog.html#technical-details"},{"type":"extras","title":"Added - Changelog","doc":"- Initial release functionality\n- Basic ExESDB adapter for Commanded\n- AggregateListener and SubscriptionProxy processes\n- Support for event streaming and subscriptions","ref":"changelog.html#added-3"},{"type":"extras","title":"Getting Started","doc":"","ref":"getting-started.html"},{"type":"extras","title":"Getting Started Guide - Getting Started","doc":"---","ref":"getting-started.html#getting-started-guide"},{"type":"extras","title":"Introduction - Getting Started","doc":"Welcome to the ExESDB Commanded Adapter! This guide will walk you through setting up the adapter to work with your Commanded application using ExESDB as your event store.","ref":"getting-started.html#introduction"},{"type":"extras","title":"Prerequisites - Getting Started","doc":"- **Elixir Version:** Ensure your Elixir environment is 1.17 or newer.\n- **Commanded Library:** This package acts as an adapter for Commanded, so you'll need to have it set up in your Elixir project.","ref":"getting-started.html#prerequisites"},{"type":"extras","title":"Installation - Getting Started","doc":"Add the adapter to your Mix dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:ex_esdb_commanded, \"~> 0.1.0\"},\n  ]\nend\n```\n\nRun `mix deps.get` to fetch the dependency.","ref":"getting-started.html#installation"},{"type":"extras","title":"Configuration - Getting Started","doc":"Configuration can be done in your `config/config.exs` file.","ref":"getting-started.html#configuration"},{"type":"extras","title":"Basic Configuration - Getting Started","doc":"Add the following configuration to specify the adapter for your Commanded application:\n\n```elixir\nconfig :my_app, MyApp.CommandedApp,\n  event_store: [\n    adapter: ExESDB.Commanded.Adapter,\n    store_id: :my_store_id,\n    stream_prefix: \"my_app_\",\n    event_type_mapper: MyApp.EventTypeMapper\n  ]\n```","ref":"getting-started.html#basic-configuration"},{"type":"extras","title":"Environment Variables - Getting Started","doc":"Make sure to check environment variables for dynamic configurations:\n\n- `EXESDB_COMMANDED_STORE_ID`\n- `EXESDB_COMMANDED_STREAM_PREFIX`\n\nSet these accordingly in your environment or `runtime.exs`.","ref":"getting-started.html#environment-variables"},{"type":"extras","title":"Advanced Options - Getting Started","doc":"You can also tweak other settings like connection timeout, retry attempts, and backoff intervals:\n\n```elixir\nconfig :ex_esdb_commanded_adapter,\n  connection_timeout: 15_000,\n  retry_attempts: 5,\n  retry_backoff: 1_500\n```","ref":"getting-started.html#advanced-options"},{"type":"extras","title":"Using the Adapter - Getting Started","doc":"1. **Start Your ExESDB Instance:** Ensure your ExESDB instance is running and reachable.\n2. **Initialize Commanded:** Once configured, Commanded will use the ExESDB adapter for event storage.\n\n3. **Event Handling:** Use your registered event type mapper to handle event types efficiently.","ref":"getting-started.html#using-the-adapter"},{"type":"extras","title":"Debugging and Logs - Getting Started","doc":"Enable detailed logging to troubleshoot:\n\n```elixir\nconfig :logger, :console,\n  format: \"$time [$level] $metadata$message\\n\",\n  metadata: [:mfa, :request_id]\n```\n\nCheck logs for information on event handling and adapter performance.","ref":"getting-started.html#debugging-and-logs"},{"type":"extras","title":"Summary - Getting Started","doc":"Congratulations! You’ve set up and configured the ExESDB Commanded Adapter in your project. Enjoy a seamless event-driven architecture with the power of Commanded and ExESDB.\n\n---","ref":"getting-started.html#summary"},{"type":"extras","title":"Event Sourcing with CQRS","doc":"","ref":"event-sourcing-with-cqrs.html"},{"type":"extras","title":"Event Sourcing with CQRS Guide - Event Sourcing with CQRS","doc":"---","ref":"event-sourcing-with-cqrs.html#event-sourcing-with-cqrs-guide"},{"type":"extras","title":"Introduction - Event Sourcing with CQRS","doc":"Event Sourcing and CQRS (Command Query Responsibility Segregation) are architectural patterns that have gained significant traction in recent years for building scalable, maintainable, and resilient applications.","ref":"event-sourcing-with-cqrs.html#introduction"},{"type":"extras","title":"History - Event Sourcing with CQRS","doc":"Event Sourcing has its roots in finance, where maintaining a clear, auditable trail of transactions is paramount. Over time, its advantages in state management and consistency have led to its adoption in various software domains. CQRS emerged to better handle the complexities in systems where read and write models have different scaling requirements and logic.","ref":"event-sourcing-with-cqrs.html#history"},{"type":"extras","title":"Principles - Event Sourcing with CQRS","doc":"- **Event Sourcing**: Instead of storing just the current state, all changes (events) are stored. The state is then derived by replaying these events.\n- **CQRS**: Segregates the read and write parts of the application by using separate models to optimize performance, security, and scalability.","ref":"event-sourcing-with-cqrs.html#principles"},{"type":"extras","title":"Applicability - Event Sourcing with CQRS","doc":"These patterns are particularly suited for systems where:\n\n- Auditability and traceability are required.\n- Complex domains requiring distinct read and write optimizations.\n- Scalable systems where different scaling strategies are needed.","ref":"event-sourcing-with-cqrs.html#applicability"},{"type":"extras","title":"Motivation - Event Sourcing with CQRS","doc":"- **Audit Trail**: Easily audit past changes as all events are stored.\n- **Scalability**: Tailor read/write models to specific performance needs.\n- **Resilience**: Replay events in case of failures, ensuring recovery.\n- **Decoupling**: Separate concerns lead to cleaner, more maintainable code.","ref":"event-sourcing-with-cqrs.html#motivation"},{"type":"extras","title":"Key Concepts and Patterns - Event Sourcing with CQRS","doc":"","ref":"event-sourcing-with-cqrs.html#key-concepts-and-patterns"},{"type":"extras","title":"Event Sourcing - Event Sourcing with CQRS","doc":"- **Event**: A record of a change that occurred in the system.\n- **Event Store**: A database designed to store events in order.\n- **Aggregate**: A cluster of domain objects treated as a single unit, modified by handling events.","ref":"event-sourcing-with-cqrs.html#event-sourcing"},{"type":"extras","title":"CQRS - Event Sourcing with CQRS","doc":"- **Command**: Represents an intention to perform an action.\n- **Query**: Request for information, optimized for performance.\n- **Read Model**: Optimized for retrieval operations, often denormalized.\n- **Write Model**: Optimized for handling business logic and making changes.","ref":"event-sourcing-with-cqrs.html#cqrs"},{"type":"extras","title":"Benefits - Event Sourcing with CQRS","doc":"- **Simplified Logic**: By separating read and write models, complex logic is easier to manage.\n- **Improved Performance**: Optimize read operations separately from write operations.\n- **Enhanced Collaboration**: Different teams can work on read and write models independently.","ref":"event-sourcing-with-cqrs.html#benefits"},{"type":"extras","title":"Conclusion - Event Sourcing with CQRS","doc":"Event Sourcing with CQRS provides a robust framework for building applications that are scalable, maintainable, and transparent. Understanding and applying these patterns empowers developers to tackle complex domains with confidence.","ref":"event-sourcing-with-cqrs.html#conclusion"},{"type":"extras","title":"Test Suite","doc":"# Test Suite\n\nThis document describes the comprehensive test suite for the ExESDB Commanded Adapter, covering unit tests, integration tests, and testing best practices.","ref":"test-suite.html"},{"type":"extras","title":"Overview - Test Suite","doc":"The ExESDB Commanded Adapter test suite ensures reliability, performance, and correctness across various scenarios including normal operations, system failures, and edge cases. The test suite is designed to validate the adapter's integration with both ExESDB and the Commanded framework.","ref":"test-suite.html#overview"},{"type":"extras","title":"Test Categories - Test Suite","doc":"","ref":"test-suite.html#test-categories"},{"type":"extras","title":"Unit Tests - Test Suite","doc":"Unit tests focus on individual components and functions:\n\n- **Store-aware functionality** (`test/commanded/store_aware_test.exs`)\n- **Multi-store integration** (`test/integration/multi_store_test.exs`)\n- **Configuration validation**\n- **Event conversion and mapping**\n- **Error handling and edge cases**","ref":"test-suite.html#unit-tests"},{"type":"extras","title":"Integration Tests - Test Suite","doc":"Integration tests validate the adapter with a real ExESDB.System instance:\n\n- **Location**: `test/integration/adapter_integration_test.exs`\n- **Helper**: `test/support/integration_test_helper.ex`\n- **Documentation**: `test/integration/README.md`","ref":"test-suite.html#integration-tests"},{"type":"extras","title":"🎯 Integration Test Suite Features - Test Suite","doc":"### **1. Test Structure**\n- **Test File**: `test/integration/adapter_integration_test.exs`\n- **Test Helper**: `test/support/integration_test_helper.ex`\n- **Documentation**: `test/integration/README.md`\n\n### **2. Test Coverage**\nThe integration tests cover exactly what you requested:\n\n#### ✅ **GIVEN**: ExESDB.System is up and fully functioning\n- Starts ExESDB.System v0.4.1 with proper configuration\n- Initializes adapter supervisors\n- Waits for system readiness\n\n#### ✅ **WHEN**: Appending Events via the Adapter\n- Tests timeout prevention during event appending\n- Verifies successful event persistence\n- Tests concurrent stream operations\n- Handles large event payloads\n\n#### ✅ **THEN**: System should not fail due to timeouts\n- 120-second timeout per test\n- Proper error handling and logging\n- Robust retry mechanisms\n\n#### ✅ **AND**: After restarting ExESDB.System\n- Stops and restarts ExESDB.System\n- Verifies data persistence across restarts\n- Tests continued functionality post-restart\n\n#### ✅ **THEN**: Events must be retrieved via the Adapter\n- Verifies event retrieval via `stream_forward`\n- Validates event structure and content\n- Tests data integrity\n\n### **3. Key Test Scenarios**\n\n1. **Basic Append & Retrieve**: Tests fundamental event storage and retrieval\n2. **System Restart Resilience**: Verifies data persistence across restarts\n3. **Concurrent Operations**: Tests multiple streams being written simultaneously\n4. **Large Payload Handling**: Ensures system handles >1KB events gracefully\n5. **Timeout Prevention**: Validates the system doesn't fail due to timeouts\n\n### **4. Dependencies Added**\n- Added `{:ex_esdb, \"~> 0.4.1\", only: [:test, :dev]}` to `mix.exs`\n- Updated test helper to conditionally start ExESDB for integration tests\n\n### **5. Test Utilities**\n- **IntegrationTestHelper**: Provides reusable functions for system management\n- **Automatic Cleanup**: Tests clean up data directories and processes\n- **Configurable Ports**: Uses random ports to avoid conflicts\n- **Comprehensive Logging**: Detailed logging for troubleshooting\n\n### **6. Running the Tests**\n\n```bash\n# Run all integration tests\nmix test --only integration\n\n# Run with verbose output\nmix test --only integration --trace\n\n# Run with environment variable\nINTEGRATION_TEST=true mix test --only integration\n```\n\n### **7. Test Configuration**\n- Store ID: `:integration_test_store`\n- Stream Prefix: `\"integration_test_\"`\n- Data Directory: `/tmp/exesdb_test_integration_test_store`\n- Timeout: 120 seconds per test","ref":"test-suite.html#integration-test-suite-features"},{"type":"extras","title":"Running Tests - Test Suite","doc":"","ref":"test-suite.html#running-tests"},{"type":"extras","title":"All Tests - Test Suite","doc":"```bash\n# Run all tests\nmix test\n\n# Run tests with coverage\nmix test --cover\n\n# Run tests with detailed output\nmix test --trace\n```","ref":"test-suite.html#all-tests"},{"type":"extras","title":"Unit Tests Only - Test Suite","doc":"```bash\n# Run unit tests (excludes integration tests)\nmix test --exclude integration\n```","ref":"test-suite.html#unit-tests-only"},{"type":"extras","title":"Integration Tests Only - Test Suite","doc":"```bash\n# Run integration tests only\nmix test --only integration\n\n# Run integration tests with verbose output\nmix test --only integration --trace\n\n# Run with integration environment variable\nINTEGRATION_TEST=true mix test --only integration\n```","ref":"test-suite.html#integration-tests-only"},{"type":"extras","title":"Specific Test Files - Test Suite","doc":"```bash\n# Run store-aware tests\nmix test test/commanded/store_aware_test.exs\n\n# Run multi-store tests\nmix test test/integration/multi_store_test.exs\n\n# Run adapter integration tests\nmix test test/integration/adapter_integration_test.exs\n```","ref":"test-suite.html#specific-test-files"},{"type":"extras","title":"Test Configuration - Test Suite","doc":"","ref":"test-suite.html#test-configuration"},{"type":"extras","title":"Environment Variables - Test Suite","doc":"- `INTEGRATION_TEST`: Set to enable ExESDB.System startup for integration tests\n- `EXESDB_COMMANDED_STORE_ID`: Override default store ID for tests\n- `EXESDB_COMMANDED_STREAM_PREFIX`: Override default stream prefix for tests","ref":"test-suite.html#environment-variables"},{"type":"extras","title":"Test Tags - Test Suite","doc":"- `@moduletag :integration`: Marks integration tests\n- `@moduletag timeout: 120_000`: Sets 2-minute timeout for integration tests\n- `@moduletag async: false`: Disables async execution for integration tests","ref":"test-suite.html#test-tags"},{"type":"extras","title":"Test Helpers - Test Suite","doc":"","ref":"test-suite.html#test-helpers"},{"type":"extras","title":"IntegrationTestHelper - Test Suite","doc":"Located at `test/support/integration_test_helper.ex`, provides:\n\n- **System Management**: Start/stop ExESDB.System instances\n- **Test Data Creation**: Generate test events and large payloads\n- **Cleanup Utilities**: Remove test data directories\n- **Readiness Checks**: Wait for system initialization\n- **Event Validation**: Verify recorded event structure","ref":"test-suite.html#integrationtesthelper"},{"type":"extras","title":"Key Functions - Test Suite","doc":"```elixir\n# Start ExESDB.System for testing\nIntegrationTestHelper.start_exesdb_system(:test_store)\n\n# Create test events\nevents = IntegrationTestHelper.create_test_events(5, \"test_suffix\")\n\n# Create large payload events\nlarge_events = IntegrationTestHelper.create_large_test_events(2)\n\n# Clean up test data\nIntegrationTestHelper.cleanup_test_data(:test_store)\n\n# Wait for condition\nIntegrationTestHelper.wait_until(fn -> system_ready?() end)\n```","ref":"test-suite.html#key-functions"},{"type":"extras","title":"Test Data Management - Test Suite","doc":"","ref":"test-suite.html#test-data-management"},{"type":"extras","title":"Temporary Directories - Test Suite","doc":"Tests use temporary directories for data storage:\n\n- Pattern: `/tmp/exesdb_test_{store_id}`\n- Automatic cleanup after test completion\n- Isolated per store to prevent conflicts","ref":"test-suite.html#temporary-directories"},{"type":"extras","title":"Port Management - Test Suite","doc":"Integration tests use dynamic port allocation:\n\n- Base ports: 2113 (TCP), 2114 (HTTP)\n- Random offset added to prevent conflicts\n- Each test store gets unique ports","ref":"test-suite.html#port-management"},{"type":"extras","title":"Troubleshooting Tests - Test Suite","doc":"","ref":"test-suite.html#troubleshooting-tests"},{"type":"extras","title":"Common Issues - Test Suite","doc":"1. **Port Conflicts**: Ensure ports 2113+ are available\n2. **Disk Space**: Verify `/tmp/` has sufficient space\n3. **Permissions**: Check write permissions for test directories\n4. **Dependencies**: Ensure ExESDB v0.4.1 is properly installed","ref":"test-suite.html#common-issues"},{"type":"extras","title":"Debugging Tips - Test Suite","doc":"```bash\n# Run with detailed logging\nmix test --only integration --trace\n\n# Check specific test output\nmix test test/integration/adapter_integration_test.exs:53\n\n# Run single test with verbose output\nmix test --only integration --trace --seed 0 --max-failures 1\n```","ref":"test-suite.html#debugging-tips"},{"type":"extras","title":"Log Analysis - Test Suite","doc":"Integration tests provide comprehensive logging:\n\n- System startup/shutdown events\n- Event append/retrieve operations\n- Error conditions and recovery\n- Performance metrics and timing","ref":"test-suite.html#log-analysis"},{"type":"extras","title":"Continuous Integration - Test Suite","doc":"The test suite is designed for CI/CD environments:\n\n- **Isolation**: Tests don't interfere with each other\n- **Cleanup**: Automatic resource cleanup prevents leaks\n- **Timeouts**: Reasonable timeouts prevent hanging builds\n- **Deterministic**: Tests produce consistent results","ref":"test-suite.html#continuous-integration"},{"type":"extras","title":"CI Configuration Example - Test Suite","doc":"```yaml\n# .github/workflows/test.yml\ntest:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - uses: erlef/setup-beam@v1\n    - run: mix deps.get\n    - run: mix test --exclude integration  # Unit tests\n    - run: INTEGRATION_TEST=true mix test --only integration  # Integration tests\n```","ref":"test-suite.html#ci-configuration-example"},{"type":"extras","title":"Best Practices - Test Suite","doc":"","ref":"test-suite.html#best-practices"},{"type":"extras","title":"Test Organization - Test Suite","doc":"- **Separation**: Clear separation between unit and integration tests\n- **Naming**: Descriptive test names following Given-When-Then pattern\n- **Grouping**: Related tests grouped in describe blocks\n- **Tagging**: Appropriate tags for test categorization","ref":"test-suite.html#test-organization"},{"type":"extras","title":"Test Data - Test Suite","doc":"- **Isolation**: Each test uses isolated data\n- **Cleanup**: Automatic cleanup prevents test pollution\n- **Realistic**: Test data reflects real-world scenarios\n- **Variety**: Different payload sizes and event types","ref":"test-suite.html#test-data"},{"type":"extras","title":"Performance - Test Suite","doc":"- **Timeouts**: Appropriate timeouts for different test types\n- **Concurrency**: Tests marked appropriately for concurrent execution\n- **Resource Usage**: Efficient use of system resources\n- **Scalability**: Tests validate system behavior under load","ref":"test-suite.html#performance"},{"type":"extras","title":"Test Metrics - Test Suite","doc":"The test suite provides metrics for:\n\n- **Coverage**: Code coverage percentage\n- **Performance**: Test execution times\n- **Reliability**: Test stability and flakiness\n- **Scope**: Feature coverage and edge cases","ref":"test-suite.html#test-metrics"},{"type":"extras","title":"Implementation Summary - Test Suite","doc":"","ref":"test-suite.html#implementation-summary"},{"type":"extras","title":"✅ Completed Work - Test Suite","doc":"The comprehensive integration test suite for the ExESDB Commanded Adapter has been successfully implemented with the following components:\n\n### **📁 Files Created/Updated:**\n\n1. **`/package/mix.exs`** - Added ExESDB v0.4.1 dependency and updated version to 0.2.4\n2. **`/package/guides/test-suite.md`** - Comprehensive test suite documentation\n3. **`/package/test/integration/adapter_integration_test.exs`** - Complete integration test suite\n4. **`/package/test/support/integration_test_helper.ex`** - Test helper utilities\n5. **`/package/test/integration/README.md`** - Integration test specific documentation\n6. **`/package/CHANGELOG.md`** - Updated with v0.2.4 changes\n7. **`/package/test/test_helper.exs`** - Enhanced to support integration tests\n\n### **🎯 Test Suite Features:**\n\n#### **Integration Tests Cover:**\n- ✅ **GIVEN**: ExESDB.System is up and fully functioning\n- ✅ **WHEN**: Appending Events via the Adapter\n- ✅ **THEN**: System should not fail due to timeouts\n- ✅ **AND**: After restarting the ExESDB.System\n- ✅ **THEN**: Events must be retrieved via the Adapter\n\n#### **Specific Test Scenarios:**\n1. **Basic Append & Retrieve**: Tests fundamental event storage and retrieval\n2. **System Restart Resilience**: Verifies data persistence across restarts\n3. **Concurrent Operations**: Tests multiple streams being written simultaneously\n4. **Large Payload Handling**: Ensures system handles >1KB events gracefully\n5. **Timeout Prevention**: Validates the system doesn't fail due to timeouts\n\n### **📋 Test Suite Documentation:**\n\nThe comprehensive test suite guide includes:\n- **Running Tests**: Commands for all test types\n- **Test Configuration**: Environment variables and settings\n- **Test Helpers**: Utility functions and setup\n- **Troubleshooting**: Common issues and debugging tips\n- **CI/CD Integration**: Guidelines for continuous integration\n- **Best Practices**: Testing patterns and conventions\n\n### **🔧 Dependencies & Configuration:**\n\n- **ExESDB v0.4.1**: Added for test and development environments only\n- **Version Bump**: Updated from 0.2.3 to 0.2.4\n- **Documentation**: Added test suite guide to ExDoc\n- **CHANGELOG**: Detailed release notes for v0.2.4\n\n### **🏃 Running the Tests:**\n\n```bash\n# Run all tests\nmix test\n\n# Run only unit tests (excludes integration tests)\nmix test --exclude integration\n\n# Run only integration tests\nmix test --only integration\n\n# Run integration tests with verbose output\nmix test --only integration --trace\n```\n\n### **📊 Current Status:**\n\n- ✅ **Unit Tests**: All passing (13 tests, 0 failures)\n- ✅ **Test Structure**: Properly organized and documented\n- ✅ **Dependencies**: ExESDB v0.4.1 successfully added\n- ✅ **Documentation**: Comprehensive guides created\n- ✅ **Version**: Successfully bumped to 0.2.4\n\nThe integration tests are structured correctly and ready to run when ExESDB.System is properly configured. The framework is in place and the tests will validate the exact scenarios you requested: timeout prevention, event persistence, system restart resilience, and data retrieval via the adapter.\n\nThe test suite provides a robust foundation for validating the ExESDB Commanded Adapter's reliability and performance in real-world scenarios! 🚀","ref":"test-suite.html#completed-work"},{"type":"extras","title":"Conclusion - Test Suite","doc":"The ExESDB Commanded Adapter test suite provides comprehensive validation of the adapter's functionality, ensuring reliability and performance across various scenarios. The integration tests specifically validate real-world usage patterns and system resilience, while unit tests ensure individual components work correctly.\n\nThe test suite is designed to be maintainable, reliable, and informative, providing confidence in the adapter's behavior and helping identify issues early in the development process.","ref":"test-suite.html#conclusion"},{"type":"extras","title":"Read Me","doc":"# ex-esdb-commanded-adapter\nAn ExESDB Adapter for the fantastic Commanded Library","ref":"readme.html"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.2"}}